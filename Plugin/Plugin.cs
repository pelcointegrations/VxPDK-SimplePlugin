using CommonServiceLocator;
using NLog;
using Pelco.Phoenix.PluginHostInterfaces;
using PluginNs.Events;
using PluginNs.Models;
using PluginNs.Services.PluginHost;
using PluginNs.Utilities;
using PluginNs.Views;
using Prism.Events;
using Prism.Ioc;
using System;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Threading;
using Unity;

namespace PluginNs
{
    class Plugin : PluginBase, IOCCPluginGeneral, IOCCPluginPlaybackNotifications
    {
        private static readonly Logger Log = LogManager.GetCurrentClassLogger();

        private Bootstrapper _bootstrapper = new Bootstrapper(true);

        private IPluginHostSvc PluginHost => ServiceLocator.Current.GetInstance<IPluginHostSvc>();

        private IEventAggregator Aggregator => ServiceLocator.Current.GetInstance<IEventAggregator>();

        /// <summary>
        /// Plugin version to report to OpsCenter
        /// </summary>
        public override string Version => Utils.I.CurrentAssembly().GetName().Version.ToString();

        /// <summary>
        /// Inform the OpsCenter if we are an 'overlay' plugin where we can share the cell with video
        /// or if we are a 'content' plugin where we take up the entire cell of OpsCenter.
        /// </summary>
        public override bool IsOverlay => true;

        /// <summary>
        /// The plugin id is a UUID generated by the plugin developer which should never be changed
        /// </summary>
        public override string PluginID => Const.PluginId;

        /// <summary>
        /// Inform OpsCenter if our plugin requires credentials to operate, this allows VideoXpert
        /// to save and provide credentials when this plugin starts
        /// </summary>
        public bool RequiresCredentials => true;

        /// <summary>
        /// The name of this plugin, will be visible in OpsCenter
        /// </summary>
        public override string Name => Utils.I.CurrentAssembly()
            .GetCustomAttributes(typeof(AssemblyTitleAttribute), false)
            .OfType<AssemblyTitleAttribute>()
            .FirstOrDefault().Title;

        /// <summary>
        /// The description of this plugin, will be visible in OpsCenter
        /// </summary>
        public override string Description => Utils.I.CurrentAssembly()
            .GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false)
            .OfType<AssemblyDescriptionAttribute>()
            .FirstOrDefault().Description;

        public Plugin(IHost host)
        {
            if (!Utils.I.IsConfigSet())
            {
                var ex = new Exception("You must first setup the values in Utilities/Const.cs");
                Log.Error(ex);
                throw ex;
            }

            Utils.I.MainDispatcher = Dispatcher.CurrentDispatcher;
            Utils.I.OCCHost = host;
        }

        /// <summary>
        /// This methods inits the Prism IoC and MVVM infrastructure
        /// </summary>
        private void RunBootstrapper()
        {
            if (!_bootstrapper.HasRun)
            {
                Log.Info("Starting");
                _bootstrapper.Run();
                //System.Diagnostics.Debugger.Launch();

                Utils.I.SetCacheItem(nameof(PersistentModel), new PersistentModel());

                Aggregator.GetEvent<ShutdownCompleted>().Subscribe(OnShutdownCompleted, ThreadOption.UIThread, true);
                PluginHost.DockRight();
            }
        }

        private void OnShutdownCompleted()
        {
            Log.Info("Shutting down");
            PluginHost.RequestClose();
        }

        /// <summary>
        /// Called by OpsCenter to acquire the view which should be displayed in the cell
        /// </summary>
        /// <returns></returns>
        public override FrameworkElement CreateControl()
        {
            Log.Info("CreateControl");
            RunBootstrapper();
            return _bootstrapper.Container.Resolve<MainView>();
        }

        /// <summary>
        /// This key is provided by Pelco to allow this plugin to show up in OpsCenter
        /// </summary>
        /// <returns></returns>
        public override string GetPluginKey()
        {
            Log.Info("GetPluginKey");
            return Const.PluginKey;
        }

        /// <summary>
        /// When switching tabs in OpsCenter the original tab data is disposed of, OpsCenter will
        /// call this method before disposing of this plugin so you can specify a state.
        /// </summary>
        /// <returns></returns>
        public string GetPluginState()
        {
            Log.Info("GetPluginState");
            return string.Empty;
        }

        /// <summary>
        /// When OpsCenter switches back to the original tab containing this plugin, then this method
        /// will be called so you can resume the plugin state
        /// </summary>
        /// <param name="pluginState"></param>
        public void SetPluginState(string pluginState)
        {
            Log.Info("SetPluginState");
        }

        /// <summary>
        /// When credentials are stored in VideoXpert, and this plugin starts up OpsCenter
        /// will then call this method and provide the plugin with the credentials saved.
        /// </summary>
        /// <param name="credentials"></param>
        public void Login(string credentials)
        {
            Log.Info("Login");
            RunBootstrapper();
            var settings = Utils.I.GetCacheItem<PersistentModel>(nameof(PersistentModel));
            if (!string.IsNullOrWhiteSpace(credentials))
            {
                var tempSettings = Utils.I.Deserialize<PersistentModel>(credentials);
                if (tempSettings != null)
                {
                    settings = tempSettings;
                    Utils.I.SetCacheItem(nameof(PersistentModel), settings);
                }
            }
            PluginHost.SetPluginWidthDockRight(settings.PluginWidth);
        }

        public void Logout()
        {
            Log.Info("Logout");
        }

        /// <summary>
        /// Called when OpsCenter wants to force kill this plugin
        /// </summary>
        public override void Shutdown()
        {
            Log.Info("Shutdown");
            Aggregator.GetEvent<ShutdownStarted>().Publish();
        }

        /// <summary>
        /// Not used
        /// </summary>
        /// <param name="show"></param>
        public void OnThumbnailPreferenceNotification(bool show)
        {
            Log.Info("OnThumbnailPreferenceNotification");
        }

        /// <summary>
        /// Called when video shows up anywhere in OpsCenter, it doesn't have to be 
        /// in the same cell as this plugin
        /// </summary>
        /// <param name="cameraId"></param>
        /// <param name="onScreen"></param>
        public void OnCameraOnScreen(string cameraId, bool onScreen)
        {
            Log.Info("OnCameraOnScreen");
        }

        /// <summary>
        /// Called when video in the cell with this plugin is removed
        /// </summary>
        public void OnVideoRemoved()
        {
            Log.Info("OnVideoRemoved");
        }

        /// <summary>
        /// Called when a new video source is put in the cell with this plugin
        /// </summary>
        /// <param name="state"></param>
        public void OnNewVideoSourcePlaying(PlayingState state)
        {
            Log.Info("OnNewVideoSourcePlaying");
        }

        /// <summary>
        /// Called when the video source in the cell with this plugin is paused
        /// </summary>
        public void OnVideoPaused()
        {
            Log.Info("OnVideoPaused");
        }

        /// <summary>
        /// Called when the play time for the video in the cell with this plugin has been updated
        /// </summary>
        /// <param name="isLive"></param>
        /// <param name="anchorTime"></param>
        /// <param name="initiationTime"></param>
        /// <param name="speed"></param>
        public void OnPlayUpdate(bool isLive, DateTime? anchorTime, DateTime? initiationTime, double speed)
        {
            Log.Info("OnPlayUpdate");
            Log.Info($"isLive: {isLive}");
            if (anchorTime.HasValue)
                Log.Info($"anchorTime: {anchorTime.Value.ToLocalTime()}");
            if (initiationTime.HasValue)
                Log.Info($"initiationTime: {initiationTime.Value.ToLocalTime()}");
            Log.Info($"speed: {speed}");
        }
    }
}
